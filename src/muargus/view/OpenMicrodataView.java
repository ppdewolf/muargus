/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package muargus.view;

import java.io.File;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.commons.io.FilenameUtils;
import argus.model.DataFilePair;
import argus.utils.SystemUtils;
import argus.utils.TauArgusUtils;

public class OpenMicrodataView extends javax.swing.JDialog {

    private static final Logger logger = Logger.getLogger(OpenMicrodataView.class.getName());
    private boolean canSelectSpss;

    // ***** Dialog Return Values *****
    public static final int CANCEL_OPTION = 1;
    public static final int APPROVE_OPTION = 0;

    public OpenMicrodataView(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(parent);
    }
    
    public void setDataFileNames(String dataFileName, String metadataFileName) {
        textFieldMicrodata.setText(dataFileName);
        textFieldMetadata.setText(metadataFileName);
    }
    
    public void setDataFieldLabels(String dataFileLabel, String metadataFileLabel) {
        labelMicrodata.setText(dataFileLabel);
        labelMetadata.setText(metadataFileLabel);
    }
    
    public int showDialog() {
        setVisible(true);
        return returnValue;
    }

    public DataFilePair getMicrodataFilePair() {
        return new DataFilePair(textFieldMicrodata.getText(), textFieldMetadata.getText());
    }

    public void selectSpssAllowed(boolean allowed) {
        this.canSelectSpss = allowed;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        labelMicrodata = new javax.swing.JLabel();
        textFieldMicrodata = new javax.swing.JTextField();
        buttonMicrodata = new javax.swing.JButton();
        labelMetadata = new javax.swing.JLabel();
        textFieldMetadata = new javax.swing.JTextField();
        buttonMetadata = new javax.swing.JButton();
        buttonOK = new javax.swing.JButton();
        buttonCancel = new javax.swing.JButton();

        fileChooser.setDialogTitle("");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Open Microdata");
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                DialogClosing(evt);
            }
        });

        labelMicrodata.setLabelFor(textFieldMicrodata);
        labelMicrodata.setText("Microdata:");

        buttonMicrodata.setText("...");
        buttonMicrodata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMicrodataActionPerformed(evt);
            }
        });

        labelMetadata.setLabelFor(textFieldMetadata);
        labelMetadata.setText("Metadata (optional): ");

        buttonMetadata.setText("...");
        buttonMetadata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMetadataActionPerformed(evt);
            }
        });

        buttonOK.setText("OK");
        buttonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOKActionPerformed(evt);
            }
        });

        buttonCancel.setText("Cancel");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelMicrodata, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelMetadata, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(textFieldMetadata, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
                    .addComponent(textFieldMicrodata))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(buttonMicrodata, javax.swing.GroupLayout.PREFERRED_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(buttonMetadata, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(428, Short.MAX_VALUE)
                .addComponent(buttonOK)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonCancel)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {buttonCancel, buttonOK});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonMicrodata, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelMicrodata)
                        .addComponent(textFieldMicrodata, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelMetadata)
                    .addComponent(textFieldMetadata, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonMetadata))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonOK)
                    .addComponent(buttonCancel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonMicrodataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMicrodataActionPerformed
        String hs = SystemUtils.getRegString("general", "datadir", "");
        if (!hs.equals("")){
            File file = new File(hs); 
            fileChooser.setCurrentDirectory(file);
        }
        fileChooser.setDialogTitle("Open Microdata");
        fileChooser.setSelectedFile(new File(""));
        fileChooser.resetChoosableFileFilters();
        // filters are shown in order of declaration, setFileFilter sets the default filter
        fileChooser.setFileFilter(new FileNameExtensionFilter("Microdata (*.asc)", "asc"));
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("Comma Separated File (*.csv)", "csv"));
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("Microdata (*.dat)", "dat"));
        if (this.canSelectSpss) {
            fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("SPSS system file (*.sav)", "sav"));
        }
        if (fileChooser.showOpenDialog(this) == javax.swing.JFileChooser.APPROVE_OPTION) {
            textFieldMicrodata.setText(fileChooser.getSelectedFile().toString());
            hs = fileChooser.getSelectedFile().getPath();
            if (!hs.equals("")){SystemUtils.putRegString("general", "datadir", hs);}
            setMetadataFileNameIfPossible();
        }
    }//GEN-LAST:event_buttonMicrodataActionPerformed

    private void buttonMetadataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMetadataActionPerformed
        String hs = SystemUtils.getRegString("general", "datadir", "");
        if (!hs.equals("")){
            File file = new File(hs); 
            fileChooser.setCurrentDirectory(file);
        }
        fileChooser.setDialogTitle("Open Metadata");
        fileChooser.setSelectedFile(new File(""));
        fileChooser.resetChoosableFileFilters();
        fileChooser.setFileFilter(new FileNameExtensionFilter("Metadata (*.rda)", "rda"));
        if (fileChooser.showOpenDialog(this) == javax.swing.JFileChooser.APPROVE_OPTION) {
            textFieldMetadata.setText(fileChooser.getSelectedFile().toString());
            hs = fileChooser.getSelectedFile().getPath();
            if (!hs.equals("")){SystemUtils.putRegString("general", "datadir", hs);}
        }
    }//GEN-LAST:event_buttonMetadataActionPerformed

    private void buttonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOKActionPerformed
        if (textFieldMicrodata.getText().trim().equals("")) 
        {
            JOptionPane.showMessageDialog(this,"Please specify microdata file.");
            return;
        }
        
        if (!TauArgusUtils.ExistFile(textFieldMicrodata.getText()))
        {
            JOptionPane.showMessageDialog(this,"Microdata file "+textFieldMicrodata.getText()+" does not exist.");
            return;
        }
        
        if (!textFieldMetadata.getText().trim().equals(""))
        {
            if (!TauArgusUtils.ExistFile(textFieldMetadata.getText()))
            {
                JOptionPane.showMessageDialog(this,"Metadata file "+textFieldMetadata.getText()+" does not exist.");
                return;                
            }
        }
        SystemUtils.writeLogbook("Microdata file: "+textFieldMicrodata.getText()+" has been opened");            
        if (!textFieldMetadata.getText().trim().equals(""))SystemUtils.writeLogbook("Metadata file: "+textFieldMetadata.getText()+" has been opened");            
        returnValue = APPROVE_OPTION;
        setVisible(false);            
    }//GEN-LAST:event_buttonOKActionPerformed

    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        setVisible(false);
        returnValue = CANCEL_OPTION;
    }//GEN-LAST:event_buttonCancelActionPerformed

    private void DialogClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_DialogClosing
        setVisible(false);
    }//GEN-LAST:event_DialogClosing

    /* 
     * In many situations the metadata filename has the same name as the 
     * microdata filename, only with another extension.
     */
    private void setMetadataFileNameIfPossible() {
        String fileName = textFieldMicrodata.getText();
        int extensionIndex = FilenameUtils.indexOfExtension(fileName);
        String baseFileName;
        if (extensionIndex == -1) {
            baseFileName = fileName;
        }
        else {
            baseFileName = fileName.substring(0, extensionIndex);
        }
        String metadataFileName = baseFileName + ".rda";
        File file = new File(metadataFileName);
        if (file.exists() && file.isFile()) {
            textFieldMetadata.setText(metadataFileName);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
            // Anco 1.6
//        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
        } catch (ClassNotFoundException  ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);}
          catch (InstantiationException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);}
          catch (IllegalAccessException  ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);}
          catch (javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                OpenMicrodataView dialog = new OpenMicrodataView(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.showDialog();
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonMetadata;
    private javax.swing.JButton buttonMicrodata;
    private javax.swing.JButton buttonOK;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel labelMetadata;
    private javax.swing.JLabel labelMicrodata;
    private javax.swing.JTextField textFieldMetadata;
    private javax.swing.JTextField textFieldMicrodata;
    // End of variables declaration//GEN-END:variables
    
    private int returnValue = CANCEL_OPTION;
}
